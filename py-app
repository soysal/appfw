#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Py-App script generator

Created on   : 2020-03-14 ( Ergin Soysal )
Last modified: Mar 14, 2020, Sat 13:05:18 -0500
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import sys
import os
import os.path

import re
from datetime import datetime

import argparse
import app


DEFAULT_APP_NAME = 'My App'
DEF_VARS = { 'now': datetime.now().isoformat(timespec='seconds') }
APP_TPL='tpl/app.tpl'
CONF_TPL='tpl/config.tpl'

def normalize(name):
    normal_name = re.sub(r'\W+', '_', name.lower())
    normal_name = re.sub(r'(?:^_|_$)+', '', normal_name)

    return normal_name


def cleanup_filename(name):
    return re.sub(r'[^a-zA-Z0-9_.]+', '', name)


def get_app_name(def_val):
    app_name = input ( "Application name [%s]: " % DEFAULT_APP_NAME )
    return app_name if app_name else def_val
    # if not app_name:
        # return def_val
    # else:
        # return app_name


def get_app_filename(name):
    default_name = '%s.py' % name

    app_file = input ( "Application filename [%s]: " % default_name )

    return cleanup_filename(app_file) \
        if app_file else default_name


def get_conf_filename(name):
    default_name = '%s.cfg' % name

    conf_file = input ( "Configuration filename [%s]: " % default_name )
    return cleanup_filename(conf_file) \
        if conf_file else default_name


def get_log_filename(name):
    default_name = '%s.log' % name

    log_file = input ( "Log filename [%s]: " % default_name )

    return cleanup_filename(log_file) \
        if log_file else default_name


def read_file(fname):
    with open(fname, 'r') as fh:
        return fh.read()


def write_file(fname, content=''):
    with open(fname, 'w') as fh:
        fh.write(content)


def generate_file(out_name, tpl_name, vars=None):

    vars = DEF_VARS if not vars else {**DEF_VARS, **vars}
    tpl = read_file(tpl_name)
    content = tpl.format(**vars)
    write_file(out_name, content)


def build():
    # Application name
    app_name = get_app_name(DEFAULT_APP_NAME)

    # Default names
    normal_name = normalize(app_name)

    app_file = get_app_filename(normal_name)
    conf_file = get_conf_filename(normal_name)
    log_file = get_log_filename(normal_name)
    vars = {'log_file': log_file, 'app_name': app_name, 'sec_name': 'log',
            'normal_name': normal_name, 'conf_file': conf_file}

    app.log.info('Generating application file %s', app_file)
    generate_file(app_file, APP_TPL, vars)

    app.log.info('Generating configuration file %s', conf_file)
    generate_file(conf_file, CONF_TPL, vars)


def main(args, config):
    try:
        build()
    except Exception as e:
        # raise_with_traceback(e)
        app.log.exception(e)


def parse_args():
    parser = argparse.ArgumentParser(description='''Py-App script generator''')
    parser.add_argument('-c', '--cfgfile', default='py-app.cfg',
                            type=str, help='Configuration file')
    parser.add_argument('--log-section', default='log', type=str,
                        help='Log section name in the configuration file')
    parser.add_argument('-o', '--output', default='.', help='Output folder')

    return parser.parse_args()


if __name__ == '__main__':
    args = parse_args()
    config = app.configure(args)
    main(args, config)


